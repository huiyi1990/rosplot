#! /usr/bin/env python

# import from a relative path
import sys, os, inspect
pydir = os.path.realpath(os.path.abspath(os.path.join(os.path.split(inspect.getfile(inspect.currentframe()))[0],"pyqtgraph")))
if pydir not in sys.path:
    sys.path.insert(0, pydir)

import signal
signal.signal(signal.SIGINT, signal.SIG_DFL)

import threading

from pyqtgraph.Qt import QtGui, QtCore
import pyqtgraph as pg
import numpy as np
import time

import yaml

#---------------------------------------------------
# GUI THREAD
#---------------------------------------------------

class MainWindow(QtGui.QMainWindow):
    def __init__(self):
        super(MainWindow, self).__init__()

        pg.setConfigOption('background', get_arg("-bg", "w"))
        pg.setConfigOption('foreground', get_arg("-fg", "k"))

        self.view = pg.GraphicsLayoutWidget()  ## GraphicsView with GraphicsLayout inserted by default
        self.setCentralWidget(self.view)

        self.w = self.view.addPlot()

        self.s1 = pg.ScatterPlotItem(
                size = int(get_arg("--size", 4)),
                pen = pg.mkPen(None),
                brush = pg.mkBrush(0,0,0,150),
                symbol = get_arg("--symbol", "o"),
                antialias = True)

        self.w.addItem(self.s1)

        self.resize(640,480)
        self.setWindowTitle('rosplot')

        self.show()

#---------------------------------------------------

    def setData(self, data):
        pos = np.asarray(data)
        spots = [{'pos': pos[i,:], 'data': 1} for i in range(pos.shape[0])]
        self.s1.setData(spots)

#---------------------------------------------------

    def addPoints(self, data):
        pos = np.asarray(data)
        spots = [{'pos': pos[i,:], 'data': 1} for i in range(pos.shape[0])]
        self.s1.addPoints(spots)

#---------------------------------------------------
# INPUT THREAD
#---------------------------------------------------

class InputThread(QtCore.QThread):
    set_data_signal = QtCore.pyqtSignal(object)
    add_points_signal = QtCore.pyqtSignal(object)

#---------------------------------------------------

    def __init__(self, argv):
        QtCore.QThread.__init__(self)

        self.point_buffer = []
        
        self.last_update = int(round(time.time()*1000))
        self.update_interval = int(get_arg("--update_interval", 200))
        self.update_interval = int(get_arg("-i", self.update_interval))

        self.point_count = int(get_arg("-c", -1))
        self.point_count = int(get_arg("--point_count", self.point_count))

        try:
            self.x_field = get_targ(1)
            self.y_field = get_targ(2)
        except:
            print ""
            print "usage: rostopic echo [topic] | rosplot [x field] [y field]"
            print "example: rostopic echo /robot_pose | rosplot pose.position.x pose.position.y"
            print ""
            print "special field keyword: time"
            print "example: rostopic echo /navsat/enu | rosplot time pose.position.z"
            print ""
            sys.exit(1)

        if arg_set("-h") or arg_set("--help"):
            print """
        rostopic echo [topic] | rosplot [options] [x field] [y field]"

        options:
            
    [number]    -i --update_interval : milliseconds between plot updates
    [number]    -c --point_count : max points to plot in sliding window
    [number]    --size : the size of the points
    [o s t d +] --symbol : the symbol to use for the points
                
            """
            sys.exit(1)

#---------------------------------------------------

    def run(self):
        yaml_string = ""
        while True:
            line = sys.stdin.readline()
            if "---" in line:
                if yaml_string != "":
                    doc = yaml.load(yaml_string)
                    
                    if self.x_field == "time":
                        x = self.traverse(doc, "header.stamp.secs") + self.traverse(doc, "header.stamp.nsecs")/1.0e9
                    else:
                        x = self.traverse(doc, self.x_field)

                    if self.y_field == "time":
                        y = self.traverse(doc, "header.stamp.secs") + self.traverse(doc, "header.stamp.nsecs")/1.0e9
                    else:
                        y = self.traverse(doc, self.y_field)

                    if x != None and y != None:
                        self.addPoints([[x,y]])

                yaml_string = ""

            else:
                yaml_string += "\n" + line

#---------------------------------------------------

    def setData(self, data):
        self.set_data_signal.emit(data)

#---------------------------------------------------

    def addPoints(self, data):
        self.point_buffer.extend(data)
        
        time_now = int(round(time.time()*1000))

        if time_now - self.last_update > self.update_interval:
            self.last_update = time_now

            if self.point_count == -1:
                
                self.add_points_signal.emit(self.point_buffer)
                self.point_buffer = []
            
            else:
                
                if len(self.point_buffer) > self.point_count:
                    excess = len(self.point_buffer) - self.point_count
                    del self.point_buffer[0:excess]

                self.set_data_signal.emit(self.point_buffer)

#---------------------------------------------------

    def traverse(self, doc, address):
        try:
            path = address.split(".")
            i = 0
            node = doc
            while i < len(path):
                if "[" in path[i] or "]" in path[i]:
                    p = path[i].split("[")[0]
                    idx = int(path[i].split("[")[1].split("]")[0])
                    node = node[p]
                    node = node[idx]
                else:
                    node = node[path[i]]

                i += 1

            return float(node)

        except:
            print "warning, could not parse %s in %s" % (address, doc)
            return None

#---------------------------------------------------
# main
#---------------------------------------------------

def get_arg(arg, default):
    for i,v in enumerate(sys.argv):
        if v == arg:
            if i+1 < len(sys.argv):
                return sys.argv[i+1]
            else:
                return default

    return default

# get non-option args
def get_targ(idx):
    i = 0
    for v in sys.argv:
        if not v.startswith("-"):
            if idx == i:
                return v
            i += 1

def arg_set(arg):
    for v in sys.argv:
        if v == arg:
            return True

    return False

if __name__ == '__main__':
    app = QtGui.QApplication([])
    it = InputThread(sys.argv)
    it.start()
    window = MainWindow()
    it.set_data_signal.connect(window.setData)
    it.add_points_signal.connect(window.addPoints)
    sys.exit(app.exec_())
