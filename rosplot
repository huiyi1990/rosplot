#! /usr/bin/env python

# import from a relative path
import sys, os, inspect
pydir = os.path.realpath(os.path.abspath(os.path.join(os.path.split(inspect.getfile(inspect.currentframe()))[0],"pyqtgraph")))
if pydir not in sys.path:
    sys.path.insert(0, pydir)

import signal
signal.signal(signal.SIGINT, signal.SIG_DFL)

import threading

from pyqtgraph.Qt import QtGui, QtCore
import pyqtgraph as pg
import numpy as np
import time

import yaml

#---------------------------------------------------
# GUI THREAD
#---------------------------------------------------

class MainWindow(QtGui.QMainWindow):
    def __init__(self):
        super(MainWindow, self).__init__()

        pg.setConfigOption('background', get_arg("-bg", "w"))
        pg.setConfigOption('foreground', get_arg("-fg", "k"))

        self.view = pg.GraphicsLayoutWidget()  ## GraphicsView with GraphicsLayout inserted by default
        self.setCentralWidget(self.view)

        self.w = self.view.addPlot(autoDownsample=True)

        self.legend = self.w.addLegend()

        self.x_fields = get_targ(1).split(",")
        self.y_fields = get_targ(2).split(",")
        self.legend_labels = []

        if len(self.x_fields) == 1:
            for f in self.y_fields:
                self.legend_labels.append(f + " vs " + self.x_fields[0])
        else:
            for x,y in zip(self.x_fields,self.y_fields):
                self.legend_labels.append(y + " vs " + x)

        alpha = int(get_arg("-a", 150))

        self.symbols = ["o", "s", "t", "d", "+"]
        self.brushes = [
                pg.mkBrush(200,10,10,alpha),
                pg.mkBrush(10,200,10,alpha),
                pg.mkBrush(10,10,200,alpha),
                pg.mkBrush(10,200,200,alpha),
                pg.mkBrush(200,10,200,alpha),
                pg.mkBrush(200,200,10,alpha)
                ]

        for i,label in enumerate(self.legend_labels):
            dummy_plot_item = pg.ScatterPlotItem(
                    size=int(get_arg("--size", 12)),
                    pen=pg.mkPen(None),
                    brush=self.brushes[i%len(self.brushes)],
                    symbol=self.symbols[i%len(self.symbols)])
            self.legend.addItem(dummy_plot_item, "- - " + label)

        self.s1 = pg.ScatterPlotItem(size = int(get_arg("--size", 6)),
                pen=pg.mkPen(None))

        self.w.addItem(self.s1)

        self.resize(640,480)
        self.setWindowTitle('rosplot')

        self.show()

#---------------------------------------------------

    def setData(self, datasets):
        spots = []
        for data in datasets:
            dataset_id = data[1]
            data = data[0]
            pos = np.asarray(data)
            _spots = [
                {'pos': pos[i,:], 
                'data': 1,
                'brush': self.brushes[dataset_id%len(self.brushes)],
                'symbol': self.symbols[dataset_id%len(self.symbols)],
                } for i in range(pos.shape[0])]
            spots.extend(_spots)
        self.s1.setData(spots)

#---------------------------------------------------

    def addPoints(self, data):
        dataset_id = data[1]
        data = data[0]
        pos = np.asarray(data)
        spots = [
            {'pos': pos[i,:], 
            'data': 1,
            'brush': self.brushes[dataset_id%len(self.brushes)],
            'symbol': self.symbols[dataset_id%len(self.symbols)],
            } for i in range(pos.shape[0])]
        self.s1.addPoints(spots)

#---------------------------------------------------
# INPUT THREAD
#---------------------------------------------------

class InputThread(QtCore.QThread):
    set_data_signal = QtCore.pyqtSignal(object)
    add_points_signal = QtCore.pyqtSignal(object)

#---------------------------------------------------

    def __init__(self, argv):
        QtCore.QThread.__init__(self)

        self.point_buffers = []
        
        self.first_time = None

        self.last_update = int(round(time.time()*1000))
        self.update_interval = int(get_arg("--update_interval", 200))
        self.update_interval = int(get_arg("-i", self.update_interval))

        self.point_count = int(get_arg("-c", -1))
        self.point_count = int(get_arg("--point_count", self.point_count))

        try:
            self.x_fields = get_targ(1).split(",")
            self.y_fields = get_targ(2).split(",")

            if len(self.x_fields) != 1 and len(self.x_fields) != len(self.y_fields):
                print "Either you must plot all Y fields against one X field"
                print "or each Y field must be paired with an X field"
                sys.exit(1)
        except:
            print_help()
            sys.exit(1)

#---------------------------------------------------

    def run(self):
        yaml_string = ""
        while True:
            line = sys.stdin.readline()
            if "---" in line:
                if yaml_string != "":
                    doc = yaml.load(yaml_string)
                    self.processInput(doc)

                yaml_string = ""

            else:
                yaml_string += "\n" + line

#---------------------------------------------------

    def processInput(self, doc):

        if len(self.x_fields) == 1: # one x field, N y fields
            # unified x axis
            x = self.traverse(doc, self.x_fields[0])

            # potentially multiple y fields to plot
            for field_id,field in enumerate(self.y_fields):
                y = self.traverse(doc, field)

                if x != None and y != None:
                    self.addPoints([[x,y]], field_id)


        else: # one x field per y field
            for i,pair in enumerate(zip(self.x_fields, self.y_fields)):
                x = self.traverse(doc, pair[0])
                y = self.traverse(doc, pair[1])

                self.addPoints([[x,y]], i)

#---------------------------------------------------

    def traverse(self, doc, field):
        if field == "time":
            t = self.traverse_raw(doc, "header.stamp.secs") + self.traverse_raw(doc, "header.stamp.nsecs")/1.0e9
            if self.first_time == None:
                self.first_time = t

            return t - self.first_time
        else:
            return self.traverse_raw(doc, field)

#---------------------------------------------------

    def setData(self, data, dataset_id):
        self.set_data_signal.emit((data, dataset_id))

#---------------------------------------------------

    def addPoints(self, data, dataset_id):
        if len(self.point_buffers) <= dataset_id:
            self.point_buffers.append([])
        self.point_buffers[dataset_id].extend(data)
        
        time_now = int(round(time.time()*1000))

        if time_now - self.last_update > self.update_interval:
            self.last_update = time_now

            if self.point_count == -1:
                
                for i,v in enumerate(self.point_buffers):
                    self.add_points_signal.emit((v, i))
                    self.point_buffers[i] = []
            
            else:
                sets = []
                for i,v in enumerate(self.point_buffers):
                    if len(v) > self.point_count:
                        excess = len(v) - self.point_count
                        del v[0:excess]
                    sets.append((v,i))
                
                self.set_data_signal.emit(sets)

#---------------------------------------------------

    def traverse_raw(self, doc, address):
        try:
            path = address.split(".")
            i = 0
            node = doc
            while i < len(path):
                if "[" in path[i] or "]" in path[i]:
                    p = path[i].split("[")[0]
                    idx = int(path[i].split("[")[1].split("]")[0])
                    node = node[p]
                    node = node[idx]
                else:
                    node = node[path[i]]

                i += 1

            return float(node)

        except:
            print "warning, could not parse %s in %s" % (address, doc)
            return None

#---------------------------------------------------
# main
#---------------------------------------------------

def get_arg(arg, default):
    for i,v in enumerate(sys.argv):
        if v == arg:
            if i+1 < len(sys.argv):
                return sys.argv[i+1]
            else:
                return default

    return default

# get non-option args
def get_targ(idx):
    i = 0
    for v in sys.argv:
        if not v.startswith("-"):
            if idx == i:
                return v
            i += 1

def arg_set(arg):
    for v in sys.argv:
        if v == arg:
            return True

    return False


def print_help():
    print """
Usage:

    rostopic echo [topic] | rosplot [x fields] [y fields] [options]

    options:
            
    [number]    -i --update_interval : milliseconds between plot updates
    [number]    -c --point_count : max points to plot in sliding window
    [number]    --size : the size of the points
    [0-255]     -a : alpha, the transparency of the points

    hint: pass multiple y fields separated by commas to plot multiple fields
                
Examples:

    --- gps positions ---
    rostopic echo /android/fix | ./rosplot latitude longitude

    --- simple time series ---
    rostopic echo /android/barometric_pressure | ./rosplot time fluid_pressure

    --- fast update, rolling window ---
    rostopic echo /android/illuminance | ./rosplot time illuminance -i 50 -c 200

    --- multiple y fields plotted against one x field ---
    rostopic echo /android/imu | ./rosplot time linear_acceleration.x,linear_acceleration.y,linear_acceleration.z

    --- three pairs of fields ---
    rostopic echo /android/imu | ./rosplot linear_acceleration.x,linear_acceleration.z,linear_acceleration.y linear_acceleration.z,linear_acceleration.y,linear_acceleration.x
            """

if __name__ == '__main__':
    if arg_set("-h") or arg_set("--help"):
        print_help()
        sys.exit(1)

    app = QtGui.QApplication([])
    it = InputThread(sys.argv)
    it.start()
    window = MainWindow()
    it.set_data_signal.connect(window.setData)
    it.add_points_signal.connect(window.addPoints)
    sys.exit(app.exec_())
